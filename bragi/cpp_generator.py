from .tokens import *
from .types import *

class StdlibTraits:
    def needs_allocator(self):
        return False
    def allocator_argument(self):
        return ''
    def allocator_parameter(self):
        return ''
    def vector(self):
        return 'std::vector'
    def string(self):
        return 'std::string'
    def assert_func(self):
        return 'assert'
    def includes(self):
        return ['<stdint.h>', '<stddef.h>', '<vector>', '<cassert>', '<optional>', '<string>']

class FriggTraits:
    def needs_allocator(self):
        return True
    def allocator_argument(self):
        return 'Allocator allocator = Allocator()'
    def allocator_parameter(self):
        return 'allocator'
    def vector(self):
        return 'frg::vector'
    def string(self):
        return 'frg::string'
    def assert_func(self):
        return 'FRG_ASSERT'
    def includes(self):
        return ['<stdint.h>', '<stddef.h>', '<frg/vector.hpp>', '<frg/macros.hpp>', '<frg/optional.hpp>', '<frg/string.hpp>']

flatten = lambda l: [item for sublist in l for item in sublist]

class CodeGenerator:
    def __init__(self, unit, stdlib, protobuf_compat = False):
        self.unit = unit
        self.protobuf_compat = protobuf_compat
        self.stdlib_traits = None
        self.indent_depth = 0
        self.indent = ''

        if stdlib == 'stdc++':
            self.stdlib_traits = StdlibTraits()
        elif stdlib == 'frigg':
            self.stdlib_traits = FriggTraits()
        else:
            raise AttributeError('invalid standard library')

        self.current_ns = None

    def enter_indent(self):
        self.indent_depth += 1
        self.indent = '\t' * self.indent_depth
        return self.indent

    def leave_indent(self):
        self.indent_depth -= 1
        self.indent = '\t' * self.indent_depth
        return self.indent

    def generate(self):
        out = '// This file has been autogenerated, changes *will* be lost eventually...\n'

        for i in self.stdlib_traits.includes():
            out += f'#include {i}\n'

        out += '#include <bragi/internals.hpp>\n\n'

        for thing in self.unit.tokens:
            if type(thing) == NamespaceTag:
                out += self.switch_ns(thing)
            if type(thing) == Enum and thing.mode == "enum":
                out += self.generate_enum(thing)
            if type(thing) == Enum and thing.mode == "consts":
                out += self.generate_consts(thing)
            if type(thing) == Message:
                out += self.generate_message(thing)

        out += self.finalize_ns()

        return out

    def switch_ns(self, ns):
        out = ''

        if self.current_ns:
            out += self.finalize_ns()

        out += f'namespace {ns.name} {{\n\n'

        self.current_ns = ns
        return out

    def finalize_ns(self):
        if self.current_ns:
            return f'}} // namespace {self.current_ns.name}\n\n'

        return ''

    def generate_consts(self, enum):
        out = f'{self.indent}namespace {enum.name} {{\n'
        i = 0
        self.enter_indent()

        for m in enum.members:
            if m.value is not None:
                i = m.value

            out += f'{self.indent}inline constexpr {self.generate_type(enum.type)} {m.name} = {i};\n'

            i += 1

        self.leave_indent()
        return out + f'{self.indent}}} // namespace {enum.name}\n\n'

    def generate_enum(self, enum):
        out = f'{self.indent}enum class {enum.name} : int32_t {{\n'
        i = 0
        self.enter_indent()

        for m in enum.members:
            if m.value is not None:
                i = m.value

            out += f'{self.indent}{m.name} = {i},\n'

            i += 1

        self.leave_indent()
        return out + f'{self.indent}}}; // enum class {enum.name}\n\n'

    def generate_type(self, t):
        if t.identity is TypeIdentity.INTEGER:
            if t.name == 'char':
                return 'char'
            return f'{"u" if not t.signed else ""}int{t.fixed_size * 8}_t'
        elif t.identity in {TypeIdentity.ENUM, TypeIdentity.CONSTS}:
            return self.generate_type(t.subtype)
        elif t.identity is TypeIdentity.STRING:
            return '{}{}'.format(self.stdlib_traits.string(),
                '<Allocator>' if self.stdlib_traits.needs_allocator() else '')
        elif t.identity is TypeIdentity.ARRAY:
            return '{}<{}{}>'.format(self.stdlib_traits.vector(),
                    self.generate_type(t.subtype),
                    ', Allocator' if self.stdlib_traits.needs_allocator() else '')
        else:
            raise RuntimeError('unknown type in generate_type')

    def subscript_type(self, t):
        return self.generate_type(t.subtype)

    def is_simple_integer(self, t):
        return t in ['char', 'int8_t', 'uint8_t', 'int16_t', 'uint16_t', 'int32_t', 'uint32_t', 'int64_t', 'uint64_t']

    def is_dyn_pointer(self, m):
        return type(m) is TagsBlock or m.type.dynamic

    def count_dynamic(self, members):
        i = 0

        for m in members:
            if self.is_dyn_pointer(m): i += 1

        return i

    def emit_stmt_checked(self, stmt):
        out = f'{self.indent}if (!{stmt})\n'

        self.enter_indent()
        out += f'{self.indent}return false;\n'
        self.leave_indent()

        return out

    def emit_write_varint(self, value):
        return self.emit_stmt_checked(f'sr.write_varint(wr, static_cast<uint64_t>({value}))')

    def emit_write_integer(self, value, type):
        assert type
        if self.is_simple_integer(type):
            return self.emit_stmt_checked(f'sr.template write_integer<{type}>(wr, {value})')
        else: # this is an enum, explicitly cast to underlying number type
            return self.emit_stmt_checked(f'sr.template write_integer<int32_t>(wr, static_cast<int32_t>({value}))')

    def emit_write_fixed_array(self, m):
        out = f'{self.indent}for (size_t i = 0; i < {m.type.array_size}; i++)\n'
        # TODO: write a more generic function to write whatever here?
        self.enter_indent()
        out += self.emit_write_integer(f'i < m_{m.name}.size() ? m_{m.name}[i] : 0', self.subscript_type(m.type))
        self.leave_indent()

        return out

    def emit_write_dynamic_array(self, m):
        out = self.emit_write_varint(f'm_{m.name}.size()')
        out += f'{self.indent}for (size_t i = 0; i < m_{m.name}.size(); i++)\n'
        # TODO: write a more generic function to write whatever here?
        self.enter_indent()
        out += self.emit_write_integer(f'm_{m.name}[i]', self.subscript_type(m.type))
        self.leave_indent()
        return out

    def emit_assert_that(self, stmt):
        return f'{self.indent}{self.stdlib_traits.assert_func()}({stmt});\n'

    def emit_dynamic_member_encoder(self, member):
        out = ''

        if type(member) is TagsBlock:
            for m in member.members:
                out += f'{self.indent}if ({"p_" + m.name}) {{\n'
                self.enter_indent()

                assert m.tag

                out += self.emit_write_varint(m.tag.value)
                if m.type.identity in {TypeIdentity.ARRAY, TypeIdentity.STRING}:
                    out += self.emit_write_dynamic_array(m)
                else:
                    out += self.emit_write_varint(f'm_{m.name}')

                self.leave_indent()
                out += f'{self.indent}}}\n'

            out += self.emit_write_varint(0) # terminator tag
        else:
            assert member.type.identity in {TypeIdentity.ARRAY, TypeIdentity.STRING}
            out += self.emit_write_dynamic_array(member)

        return out + '\n'

    def determine_pointer_size(self, what, size):
        if what != 'head':
            return 8

        if size < 256:
            return 1
        elif size < 65536:
            return 2
        elif size < 4294967296:
            return 4
        elif size < 18446744073709551616:
            return 8
        else:
            return None

    def calculate_fixed_part_size(self, what, members, parent):
        i = 8 if what == 'head' else 0

        ptr_size = self.determine_pointer_size(what, parent.head.size if what == 'head' else None)

        for m in members:
            if not self.is_dyn_pointer(m):
                size = m.type.fixed_size
                assert size
                i += size
            else:
                i += ptr_size

        return i

    def emit_determine_dyn_off_for(self, skip, prev, n):
        out = ''
        into = f'dyn_offs[{n}]'

        if n > 0:
            out += f'{self.indent}{into} = dyn_offs[{n - 1}];\n'
        else:
            out += f'{self.indent}{into} = {skip};\n'

        if not prev:
            return out + '\n'

        if type(prev) is TagsBlock:
            for m in prev.members:
                out += f'{self.indent}if ({"p_" + m.name}) {{\n'
                self.enter_indent()

                assert m.tag

                out += f'{self.indent}{into} += bragi::detail::size_of_varint({m.tag.value});\n'
                if m.type.identity in {TypeIdentity.ARRAY, TypeIdentity.STRING}:
                    out += f'{self.indent}{into} += bragi::detail::size_of_varint(m_{m.name}.size());\n'
                    out += f'{self.indent}{into} += {m.type.subtype.fixed_size} * m_{m.name}.size();\n'
                else:
                    out += f'{self.indent}{into} += bragi::detail::size_of_varint(static_cast<uint64_t>(m_{m.name}));\n'

                self.leave_indent()
                out += f'{self.indent}}}\n'

            out += f'{self.indent}{into} += bragi::detail::size_of_varint(0);\n'
        else:
            assert prev.type.identity in {TypeIdentity.ARRAY, TypeIdentity.STRING}
            out += f'{self.indent}{into} += bragi::detail::size_of_varint(m_{prev.name}.size());\n'
            out += f'{self.indent}{into} += {prev.type.subtype.fixed_size} * m_{prev.name}.size();\n'

        return out + '\n'

    def emit_calculate_size_of(self, what, members, parent):
        out = f'{self.indent}size_t size_of_{what}() {{\n'
        self.enter_indent()

        out += f'{self.indent}size_t size = {self.calculate_fixed_part_size(what, members, parent)};\n'

        dyn = [i for i in members if self.is_dyn_pointer(i)]

        for m in dyn:
            if type(m) is TagsBlock:
                for mm in m.members:
                    out += f'{self.indent}if ({"p_" + mm.name}) {{\n'
                    self.enter_indent()

                    assert mm.tag

                    out += f'{self.indent}size += bragi::detail::size_of_varint({mm.tag.value});\n'
                    if mm.type.identity in {TypeIdentity.ARRAY, TypeIdentity.STRING}:
                        out += f'{self.indent}size += bragi::detail::size_of_varint(m_{mm.name}.size());\n'
                        out += f'{self.indent}size += {mm.type.subtype.fixed_size} * m_{mm.name}.size();\n'
                    else:
                        out += f'{self.indent}size += bragi::detail::size_of_varint(static_cast<uint64_t>(m_{mm.name}));\n'

                    self.leave_indent()
                    out += f'{self.indent}}}\n'

                out += f'{self.indent}size += bragi::detail::size_of_varint(0);\n'
            else:
                assert m.type.identity in {TypeIdentity.ARRAY, TypeIdentity.STRING}
                out += f'{self.indent}size += bragi::detail::size_of_varint(m_{m.name}.size());\n'
                out += f'{self.indent}size += {m.type.subtype.fixed_size} * m_{m.name}.size();\n'

        out += f'\n{self.indent}return size;\n'

        self.leave_indent()
        out += f'{self.indent}}}\n'

        return out + '\n'

    def emit_stub_calculate_size_of(self, what):
        out = f'{self.indent}size_t size_of_{what}() {{\n'
        self.enter_indent()
        out += f'{self.indent}return {8 if what == "head" else 0};\n'
        self.leave_indent()

        out += f'{self.indent}}}\n'

        return out + '\n'

    def determine_pointer_type(self, what, size):
        size = self.determine_pointer_size(what, size)
        if not size:
            return None

        return f'uint{size * 8}_t'

    def emit_part_encoder(self, what, parent, members):
        out = f'{self.indent}template <typename Writer>\n'
        out += f'{self.indent}bool encode_{what}(Writer &wr) {{\n'
        self.enter_indent()

        out += f'{self.indent}bragi::serializer sr;\n'

        fixed_size = self.calculate_fixed_part_size(what, members, parent)
        ptrs = [i for i in members if self.is_dyn_pointer(i)]

        ptr_type = self.determine_pointer_type(what, parent.head.size if what == 'head' else None)

        if len(ptrs) > 0:
            out += f'{self.indent}{ptr_type} dyn_offs[{len(ptrs)}];\n'

        out += '\n'

        for i, m in enumerate(ptrs):
            out += self.emit_determine_dyn_off_for(fixed_size, ptrs[i - 1] if i > 0 else None, i)

        if what == 'head':
            out += f'{self.indent}// Encode ID\n'
            out += self.emit_write_integer('message_id', 'uint32_t') + '\n\n'

            out += f'{self.indent}// Encode tail size\n'
            out += self.emit_write_integer('size_of_tail()', 'uint32_t') + '\n'

        i = 0
        for m in members:
            out += f'{self.indent}// Encode {"tags" if type(m) is TagsBlock else m.name}\n';
            if self.is_dyn_pointer(m):
                out += self.emit_write_integer(f'dyn_offs[{i}]', ptr_type)
                i += 1
            elif m.type.identity is TypeIdentity.ARRAY:
                out += self.emit_write_fixed_array(m)
            else:
                out += self.emit_write_integer(f'm_{m.name}', self.generate_type(m.type))
            out += '\n'

        for m in members:
            if not self.is_dyn_pointer(m): continue

            out += f'{self.indent}// Encode {"tags" if type(m) is TagsBlock else m.name} (dynamic width)\n';
            out += self.emit_dynamic_member_encoder(m)

        out += f'{self.indent}return true;\n'
        self.leave_indent()
        out += f'{self.indent}}}\n\n'

        return out

    def emit_stub_part_encoder(self, what):
        out = f'{self.indent}template <typename Writer>\n'
        out += f'{self.indent}bool encode_{what}(Writer &wr) {{\n'
        self.enter_indent()

        out += f'{self.indent}bragi::serializer sr;\n'

        out += '\n'

        if what == 'head':
            out += f'{self.indent}// Encode ID\n'
            out += self.emit_write_integer('message_id', depth, 'uint32_t') + '\n'
            out += self.emit_write_integer('size_of_tail()', depth, 'uint32_t') + '\n'
        else:
            out += f'{self.indent}(void)sr;\n\n'

        out += f'{self.indent}return true;\n'
        self.leave_indent()
        out += f'{self.indent}}}\n\n'

        return out

    def emit_read_integer_into(self, to, type):
        if self.is_simple_integer(type):
            return self.emit_stmt_checked(f'de.read_integer<{type}>(rd, {to})')
        else: # this is an enum, read into an integer and cast to enum type
            out = self.emit_stmt_checked(f'de.read_integer<int32_t>(rd, enum_tmp)')
            out += f'{self.indent}{to} = static_cast<{type}>(enum_tmp);\n'
            return out

    def emit_read_varint_into(self, to):
        return self.emit_stmt_checked(f'de.read_varint(rd, {to})')

    def emit_set_member(self, member, enabled):
        return f'{self.indent}p_{member.name} = {"true" if enabled else "false"};\n'

    def emit_loop_resize_read_into(self, m, size):
        target_size = size

        if m.type.identity is TypeIdentity.ARRAY and m.type.n_elements:
            target_size = m.type.n_elements

        out = f'{self.indent}m_{m.name}.resize({target_size});\n'
        out += f'{self.indent}for (size_t i = 0; i < {target_size}; i++)\n'
        if target_size != size:
            self.enter_indent()
            out += f'{self.indent}if (i < {size})\n'

        self.enter_indent()
        out += self.emit_read_integer_into(f'*(m_{m.name}.data() + i)', self.subscript_type(m.type))
        self.leave_indent()

        if target_size != size:
            self.leave_indent()

        return out

    def emit_decode_dynamic_member(self, m, ptr_type):
        out = self.emit_read_integer_into('ptr', ptr_type)
        out += f'{self.indent}de.push_index(ptr);\n'

        if type(m) is TagsBlock:
            out += f'{self.indent}do {{\n'
            self.enter_indent()
            out += f'{self.indent}uint64_t tmp2;\n'
            out += self.emit_read_varint_into('tmp')
            out += f'{self.indent}switch(tmp) {{\n'
            self.enter_indent()
            out += f'{self.indent}case 0:\n{self.indent}break;\n'
            for mm in m.members:
                assert mm.tag
                out += f'{self.indent}case {mm.tag.value}:\n'
                self.enter_indent()

                if mm.type.identity in {TypeIdentity.ARRAY, TypeIdentity.STRING}:
                    out += self.emit_read_varint_into('tmp2')
                    out += self.emit_loop_resize_read_into(mm, 'tmp2')
                else:
                    # TODO: is this correct w.r.t. signed numbers?
                    out += self.emit_read_varint_into('tmp2')
                    out += f'{self.indent}m_{mm.name} = static_cast<{self.generate_type(mm.type)}>(tmp2);\n'
                out += self.emit_set_member(mm, True)

                out += f'{self.indent}break;\n'
                self.leave_indent()
            out += f'{self.indent}default:\n'
            self.enter_indent()
            out += self.emit_assert_that('!"Unknown tag!"')
            self.leave_indent()
            self.leave_indent()
            out += f'{self.indent}}}\n'
            self.leave_indent()
            out += f'{self.indent}}} while(tmp);\n'
        else:
            out += self.emit_read_varint_into('tmp')
            out += self.emit_loop_resize_read_into(m, 'tmp')
            out += self.emit_set_member(m, True)

        out += f'{self.indent}de.pop_index();\n'

        return out

    def emit_part_decoder(self, what, parent, members):
        out = f'{self.indent}template <typename Reader>\n'
        out += f'{self.indent}bool decode_{what}(Reader &rd) {{\n'
        self.enter_indent()

        out += f'{self.indent}bragi::deserializer de;\n'
        out += f'{self.indent}uint64_t tmp; (void)tmp;\n'
        out += f'{self.indent}uint32_t tmp_s; (void)tmp_s;\n'
        out += f'{self.indent}int32_t enum_tmp; (void)enum_tmp;\n'

        ptr_type = self.determine_pointer_type(what, parent.head.size if what == 'head' else None)

        out += f'{self.indent}{ptr_type} ptr; (void)ptr;\n'

        if what == 'head':
            out += f'{self.indent}// Decode and check ID\n'
            out += self.emit_read_integer_into('tmp_s', 'uint32_t')
            out += self.emit_stmt_checked('(tmp_s == message_id)')
            out += '\n'

            out += f'{self.indent}// Decode and ignore tail size\n'
            out += self.emit_read_integer_into('tmp_s', 'uint32_t')
            out += '\n'

        for m in members:
            out += f'{self.indent}// Decode {"tags" if type(m) is TagsBlock else m.name}\n';
            if self.is_dyn_pointer(m):
                out += self.emit_decode_dynamic_member(m, ptr_type)
            else:
                if m.type.identity is TypeIdentity.ARRAY:
                    assert m.type.array_size > 0
                    out += self.emit_loop_resize_read_into(m, m.type.array_size)
                else:
                    out += self.emit_read_integer_into(f'm_{m.name}', self.generate_type(m.type))
                out += self.emit_set_member(m, True)
            out += '\n'

        out += f'{self.indent}return true;\n'
        self.leave_indent()
        out += f'{self.indent}}}\n\n'

        return out

    def emit_stub_part_decoder(self, what):
        out = f'{self.indent}template <typename Reader>\n'
        out += f'{self.indent}bool decode_{what}(Reader &rd) {{\n'
        self.enter_indent()

        out += f'{self.indent}bragi::deserializer de;\n'

        if what == 'head':
            out += f'{self.indent}// Decode and check ID\n'
            out += self.emit_read_integer_into('tmp', 'uint64_t')
            out += self.emit_assert_that('tmp == message_id')
            out += '\n'
        else:
            out += f'{self.indent}(void)de;\n\n'

        out += f'{self.indent}return true;\n'
        self.leave_indent()
        out += f'{self.indent}}}\n\n'

        return out

    # Protobuf compatibilty code
    def emit_serialize_as_string(self, parent):
        out = ''

        if type(self.stdlib_traits) is FriggTraits:
            out = f'{self.indent}void SerializeToString(frg::string<Allocator> *str) {{\n'
            self.enter_indent()

            out += f'{self.indent}str->resize({parent.head.size});\n'
            out += f'{self.indent}bragi::limited_writer wr{{str->data(), str->size()}};\n\n'
            out += self.emit_assert_that('encode_head(wr)')

            self.leave_indent()
            out += f'{self.indent}}}\n\n'
        else:
            out = f'{self.indent}std::string SerializeAsString() {{\n'
            self.enter_indent()

            out += f'{self.indent}std::string str(size_t({parent.head.size}), \'\\0\');\n'
            out += f'{self.indent}bragi::limited_writer wr{{str.data(), str.size()}};\n\n'
            out += self.emit_assert_that('encode_head(wr)') + '\n'
            out += f'{self.indent}return str;\n'
            self.leave_indent()

            out += f'{indent}}}\n\n'

        return out

    # Protobuf compatibilty code
    def emit_parse_from_array(self, parent):
        out = f'{self.indent}bool ParseFromArray(const void *data, size_t size) {{\n'
        self.enter_indent()

        out += f'{self.indent}bragi::limited_reader rd{{data, size}};\n\n'
        out += f'{self.indent}return decode_head(rd);\n'

        self.leave_indent()

        out += f'{self.indent}}}\n\n'

        return out

    def generate_message(self, message):
        head = None
        tail = None

        try:
            head = message.head
        except:
            head = None

        try:
            tail = message.tail
        except:
            tail = None

        all_members = flatten([
            flatten((m.members if type(m) is TagsBlock else [m] for m in head.members) if head is not None else []),
            flatten((m.members if type(m) is TagsBlock else [m] for m in tail.members) if tail is not None else [])
        ])

        out = ''
        if self.stdlib_traits.needs_allocator():
            out += f'{self.indent}template <typename Allocator>\n'

        out += f'{self.indent}struct {message.name} {{\n'
        self.enter_indent()
        out += f'{self.indent}static constexpr uint32_t message_id = {message.id};\n'
        out += f'{self.indent}static constexpr size_t head_size = {message.head.size};\n\n'

        out += f'{self.indent}{message.name}({self.stdlib_traits.allocator_argument()})'

        if len(all_members) > 0:
            out += f'\n{self.indent}: '
            for i, m in enumerate(all_members):
                alloc = self.stdlib_traits.allocator_parameter() if m.type.identity in {TypeIdentity.ARRAY, TypeIdentity.STRING} else ''
                out += f'm_{m.name}{{{alloc}}}, p_{m.name}{{false}}'

                if i < len(all_members) - 1:
                    out += f', \n{self.indent}  '

        out += ' { }\n\n'


        for m in all_members:
            # getters
            out += f'{self.indent}{self.generate_type(m.type)} {m.name}() {{\n'
            self.enter_indent()
            out += f'{self.indent}return m_{m.name};\n'
            self.leave_indent()
            out += f'{self.indent}}}\n\n'

            if m.type.identity is TypeIdentity.ARRAY:
                out += f'{self.indent}{self.subscript_type(m.type)} {m.name}(size_t i) {{\n'
                self.enter_indent()
                out += f'{self.indent}return m_{m.name}[i];\n'
                self.leave_indent()
                out += f'{self.indent}}}\n\n'

                out += f'{self.indent}size_t {m.name}_size() {{\n'
                self.enter_indent()
                out += f'{self.indent}return m_{m.name}.size();\n'
                self.leave_indent()
                out += f'{self.indent}}}\n\n'

            # setters
            out += f'{self.indent}void set_{m.name}({self.generate_type(m.type)} val) {{\n'
            self.enter_indent()
            out += f'{self.indent}p_{m.name} = true;\n'
            out += f'{self.indent}m_{m.name} = val;\n'
            self.leave_indent()
            out += f'{self.indent}}}\n\n'

            if m.type.identity is TypeIdentity.ARRAY:
                out += f'{self.indent}void set_{m.name}(size_t i, {self.subscript_type(m.type)} val) {{\n'
                self.enter_indent()
                out += f'{self.indent}p_{m.name} = true;\n'
                out += f'{self.indent}m_{m.name}[i] = val;\n'
                self.leave_indent()
                out += f'{self.indent}}}\n\n'

                out += f'{self.indent}void add_{m.name}({self.subscript_type(m.type)} v) {{\n'
                self.enter_indent()
                out += f'{self.indent}p_{m.name} = true;\n'
                out += f'{self.indent}m_{m.name}.push_back(v);\n'
                self.leave_indent()
                out += f'{self.indent}}}\n\n'

        if message.head:
            out += self.emit_calculate_size_of('head', message.head.members, message)
            out += self.emit_part_encoder('head', message, message.head.members)
            out += self.emit_part_decoder('head', message, message.head.members)
        else:
            out += self.emit_stub_calculate_size_of('head')
            out += self.emit_stub_part_encoder('head')
            out += self.emit_stub_part_decoder('head')
        if message.tail:
            out += self.emit_calculate_size_of('tail', message.tail.members, message)
            out += self.emit_part_encoder('tail', message, message.tail.members)
            out += self.emit_part_decoder('tail', message, message.tail.members)
        else:
            out += self.emit_stub_calculate_size_of('tail')
            out += self.emit_stub_part_encoder('tail')
            out += self.emit_stub_part_decoder('tail')


        if self.protobuf_compat:
            out += self.emit_serialize_as_string(message)
            out += self.emit_parse_from_array(message)

        if len(all_members):
            self.leave_indent()
            out += f'{self.indent}private:\n'
            self.enter_indent()
            for m in all_members:
                out += f'{self.indent}{self.generate_type(m.type)} m_{m.name}; bool p_{m.name};\n'

        self.leave_indent()

        return out + f'{self.indent}}}; // struct {message.name}\n\n'
